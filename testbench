`timescale 1ns / 1ps

module ALU_4bit_tb;

// Inputs
reg [3:0] A, B;
reg [2:0] sel;

// Outputs
wire [3:0] result;
wire carry, zero;

// Instantiate the ALU
ALU_4bit uut (
    .A(A), .B(B), .sel(sel),
    .result(result), .carry(carry), .zero(zero)
);

initial begin
    // Monitor values
    $monitor("Time=%0t | A=%b | B=%b | sel=%b | Result=%b | Carry=%b | Zero=%b",
             $time, A, B, sel, result, carry, zero);

    // Test Cases
    A = 4'b0011; B = 4'b0001; sel = 3'b000; #10; // Addition
    A = 4'b0110; B = 4'b0010; sel = 3'b001; #10; // Subtraction
    A = 4'b1010; B = 4'b0101; sel = 3'b010; #10; // AND
    A = 4'b1100; B = 4'b1010; sel = 3'b011; #10; // OR
    A = 4'b1111; B = 4'b0000; sel = 3'b100; #10; // XOR
    A = 4'b0011; B = 4'b0011; sel = 3'b101; #10; // Multiplication
    A = 4'b0001; B = 4'b0000; sel = 3'b110; #10; // Left Shift
    A = 4'b1000; B = 4'b0000; sel = 3'b111; #10; // Right Shift

    $stop; // End simulation
end

endmodule
